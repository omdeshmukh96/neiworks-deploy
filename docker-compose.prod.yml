services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-neiworks_prod}
      POSTGRES_USER: ${POSTGRES_USER:-neiworks}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-neiworks}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-neiworks}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-neiworks_prod}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      AI_SERVICE_URL: http://ai-microservices:8000
    depends_on:
      postgres:
        condition: service_healthy
      ai-microservices:
        condition: service_healthy
    networks:
      - backend
      - frontend
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AI Microservices
  ai-microservices:
    build:
      context: ./ai_microservices
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      FLASK_ENV: production
      MODEL_PATH: /app/models
    volumes:
      - ai_models:/app/models
    networks:
      - backend
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      REACT_APP_API_URL: http://backend:5000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend
    ports:
      - "3000:3000"

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./analytics/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"

  # Grafana
  grafana:
    image: grafana/grafana:latest
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./analytics/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    ports:
      - "3001:3000"
    depends_on:
      prometheus:
        condition: service_started

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  backend:
  frontend:
  monitoring:


